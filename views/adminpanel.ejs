<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Panel</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <h1>My Shopping Website</h1>
        <nav>
            <div class="search-container">
                <form id="search-form">
                    <input type="text" id="search-input" placeholder="please enter product name...">
                    <button type="submit">Search</button>
                </form>
            </div>
        </nav>
        <div class="user-info">
            <% if (user && user.isLoggedIn) { %>
                <!-- 用户已登录 -->
                <span>Welcome, <%= user.name %>!</span>
                <button><a href="/logout">Logout</a></button>
            <% } else { %>
                <!-- 用户未登录 -->
                <button><a href="/login">Login / Sign Up</a></button>
            <% } %>
          </div>  
    </header>

    <main>
        <div class="breadcrumb">
        <% if (categories && categories.length > 0) { %>
        <% categories.forEach(function(category) { %>
            <h1><a href="/category/<%= category.catid %>"><%= category.name %></a></h1>
            <section class="product-list">
            <% if (products && products.length > 0) { %>
                <% products.forEach(function(product) { %>
                <% if (product.catid == category.catid) { %>
                    <div class="product"> 
                        <div class="product-actions">
                            <button class="menu-btn">&#8942;</button>
                            <div class="menu">
                                <button class="menu-item change">Change</button>
                                <button class="menu-item delete">Delete</button>
                            </div>
                        </div>
                        <a href="/product/<%= product.pid %>">
                            <img src="/images/<%= product.pid %>-thumb.png">
                            <h3><%= product.name %></h3>
                            <p>$<%= parseFloat(product.price).toFixed(2) %></p>
                        </a>
                        <button class="add-to-cart" data-product-id="<%= product.pid %>">Add to Cart</button>
                    </div> 
                <% } %>
                <% }); %>
            <% } %>
            <div class="add-product-button">
                <a href="../add-product-view/<%= category.catid %>">+</a>
            </div>
            </section>
        <% }); %>
        <% } else { %>
        <li>No categories available.</li>
        <% } %>
        </div>
        
        <div class="shopping-cart">
            <h2>Shopping Cart</h2>
            <ul id="cart-items"></ul>
            <p>Total: $<span id="total-amount">0.00</span></p>
            <button class="checkout">Checkout</button>
        </div>

    </main>

    <footer>
        <p>CHEN Chaoqun 1155224919</p>
    </footer>

    <script nonce="<%= locals.nonce %>">
        const csrfToken = '<%= csrfToken %>';
        document.addEventListener('DOMContentLoaded', (event) => {
            updateCartDisplay();
        });

        document.querySelectorAll('.add-to-cart').forEach(button => {
            button.addEventListener('click', async (event) => {
                const productId = event.target.getAttribute('data-product-id');
                await updateShoppingCart(productId);
            });
        });
    
        async function updateShoppingCart(productId) {
            try {
                const response = await fetch('/update-cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        productId,
                        csrfToken // 将 CSRF Token 添加到请求体中
                    })
                });
    
                if(response.ok) {
                    const result = await response.json();
                    alert(result.message || 'Product added to cart successfully!');
                    // 更新购物车显示
                    updateCartDisplay();
                } else {
                    console.error('Failed to add product to cart.');
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }
        
        async function updateCartDisplay() {
            try {
                const response = await fetch('/get-cart');
                if (!response.ok) throw new Error("Network response was not ok");
                const data = await response.json();
                
                // 获取购物车元素
                const cartItemsElement = document.getElementById('cart-items');
                cartItemsElement.innerHTML = ''; // 清空当前购物车显示

                let totalAmount = 0; // 初始化总价

                // 遍历购物车项并添加到DOM
                data.cartItems.forEach(item => {
                    const li = document.createElement('li');
                    
                    // 创建商品名称
                    const nameSpan = document.createElement('span');
                    nameSpan.textContent = `${item.name} - `;
                    
                    // 创建数量输入框
                    const input = document.createElement('input');
                    input.type = 'number';
                    input.value = item.quantity;
                    input.onchange = () => updateItemQuantity(item.cartItemId, input.value);

                    // 计算单项商品总价
                    const itemTotal = parseFloat(item.price) * parseInt(input.value);
                    totalAmount += itemTotal; // 累加到总价
                    
                    // 创建移除按钮
                    const removeButton = document.createElement('button');
                    removeButton.textContent = 'Remove';
                    removeButton.onclick = () => removeFromCart(item.cartItemId);

                    // 将所有子元素添加到li中
                    li.appendChild(nameSpan);
                    li.appendChild(input);
                    li.appendChild(document.createTextNode(`Total: $${itemTotal.toFixed(2)} - `)); // 显示单项商品总价
                    li.appendChild(removeButton);
                    
                    // 添加到购物车列表中
                    cartItemsElement.appendChild(li);
                });

                // 更新页面上的总金额显示
                document.getElementById('total-amount').textContent = totalAmount.toFixed(2);
            } catch (error) {
                console.error('Error fetching cart:', error);
            }
        }
    
        function updateItemQuantity(itemId, quantity) {
            fetch('/update-cart-item', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    itemId,
                    quantity,
                    csrfToken
                })
            }).then(response => {
                if (!response.ok) throw new Error("Network response was not ok");
                return response.json();
            }).then(data => {
                console.log(data.message);
                updateCartDisplay(); // 重新获取并显示最新购物车状态
            }).catch(error => console.error('Error updating cart item:', error));
        }
    
        function removeFromCart(itemId) {
            fetch(`/remove-from-cart/${itemId}`, {
                method: 'DELETE',
                headers: {
                    'X-CSRF-Token': csrfToken // 将 CSRF Token 添加到请求头中
                }
            })
            .then(response => {
                if (!response.ok) throw new Error("Network response was not ok");
                return response.json();
            })
            .then(data => {
                console.log(data.message);
                updateCartDisplay(); // 重新获取并显示最新购物车状态
            })
            .catch(error => console.error('Error removing from cart:', error));
        }

        document.addEventListener('DOMContentLoaded', function() {
        const menuButtons = document.querySelectorAll('.menu-btn');

        menuButtons.forEach(button => {
            button.addEventListener('click', function(event) {
            event.stopPropagation(); // 阻止事件冒泡
            const menu = this.nextElementSibling;

            // 隐藏所有打开的菜单
            hideAllMenus();

            // 切换当前菜单的显示状态
            if (menu.style.display === 'block') {
                menu.style.display = 'none';
            } else {
                menu.style.display = 'block';
            }
            });
        });

        // 点击页面其他地方时隐藏所有菜单
        document.addEventListener('click', function() {
            hideAllMenus();
        });

        // 处理菜单项的点击事件
        document.querySelectorAll('.menu-item').forEach(item => {
            item.addEventListener('click', function(event) {
            event.stopPropagation(); // 阻止事件冒泡
            const action = this.textContent.toLowerCase();
            const productId = this.closest('.product').querySelector('a').getAttribute('href').split('/').pop();
            handleAction(action, productId);
            });
        });

        function hideAllMenus() {
            const menus = document.querySelectorAll('.menu');
            menus.forEach(menu => {
            menu.style.display = 'none';
            });
        }

        function handleAction(action, productId) {
            if (action === 'change') {
                window.location.href = `/change-product-view/${encodeURIComponent(productId)}`;
            } else if (action === 'delete') {
                alert(`Delete product with ID: ${productId}`);

                const data = {
                    productId: productId,
                    csrfToken: csrfToken
                };
                fetch('/delete-product', {  
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                })
                .then(response => response.json())
                .then(data => {
                    console.log('Success:', data);
                    alert(`Delete product successfully!`);
                    location.reload();
                })
                .catch((error) => {
                    console.error('Error:', error);
                    alert(`Delete error!`);
                });
            }
        }
        });
    </script>
</body>
</html>